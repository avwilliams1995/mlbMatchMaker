{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","teams","setTeams","useState","loading","setLoading","fetchLeaderboard","async","response","fetch","data","json","console","log","sortedData","sort","a","b","score","Number","error","useEffect","React","createElement","className","onClick","disabled","map","team","index","key","name","golfer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAuEeA,MA9Df,WACE,MAAOC,EAAOC,GAAYC,mBAAiB,KACpCC,EAASC,GAAcF,oBAAkB,GAE1CG,EAAmBC,UACvBF,GAAW,GACX,IACE,MAAMG,QAAiBC,MAAM,qCACvBC,QAAaF,EAASG,OAC5BC,QAAQC,IAAI,OAAQH,GAEpB,MAAMI,EAAaJ,EAAKK,KAAK,CAACC,EAASC,KACV,MAAZD,EAAEE,MAAgB,EAAIC,OAAOH,EAAEE,SACnB,MAAZD,EAAEC,MAAgB,EAAIC,OAAOF,EAAEC,SAIhDhB,EAASY,GACTT,GAAW,GACX,MAAOe,GACPR,QAAQQ,MAAM,8BAA+BA,GAC9C,QACCf,GAAW,KAQf,OAJAgB,oBAAU,KACRf,KACC,IAGDgB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,UAAI,kCACJD,IAAAC,cAAA,UAAQE,QAASnB,EAAkBoB,SAAUtB,GAC1CA,EAAU,aAAe,uBAE5BkB,IAAAC,cAAA,OAAKC,UAAU,+BACbF,IAAAC,cAAA,SAAOC,UAAU,qBACfF,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UAAI,UACJD,IAAAC,cAAA,UAAI,WAGRD,IAAAC,cAAA,aACGtB,EAAM0B,IAAI,CAACC,EAAMC,IAChBP,IAAAC,cAAA,MAAIO,IAAKD,GACPP,IAAAC,cAAA,UAAKK,EAAKG,MACVT,IAAAC,cAAA,UAAKK,EAAKI,QACVV,IAAAC,cAAA,UAAKK,EAAKV,eCvD5Be,IAASC,OACPZ,IAAAC,cAACD,IAAMa,WAAU,KACfb,IAAAC,cAACvB,EAAG,OAENoC,SAASC,eAAe","file":"static/js/main.9025186e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ninterface Team {\n  name: string;\n  golfer: string;\n  score: number | string;\n}\n\nfunction App() {\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchLeaderboard = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3000/api/scraper\");\n      const data = await response.json();\n      console.log('data', data)\n\n      const sortedData = data.sort((a: Team, b: Team) => {\n        const scoreA = a.score === \"E\" ? 0 : Number(a.score);\n        const scoreB = b.score === \"E\" ? 0 : Number(b.score);\n        return scoreA - scoreB;\n      });\n      \n      setTeams(sortedData);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Travel League Golf Leaderboard</h1>\n        <button onClick={fetchLeaderboard} disabled={loading}>\n          {loading ? \"Loading...\" : \"Refresh Leaderboard\"}\n        </button>\n        <div className=\"Leaderboard-table-container\">\n          <table className=\"Leaderboard-table\">\n            <thead>\n              <tr>\n                <th>Team Name</th>\n                <th>Golfer</th>\n                <th>Score</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team, index) => (\n                <tr key={index}>\n                  <td>{team.name}</td>\n                  <td>{team.golfer}</td>\n                  <td>{team.score}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}